{"version":3,"file":"Plugging.js","sourceRoot":"","sources":["../../mixins/Plugging.ts"],"names":[],"mappings":"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","sourcesContent":["import { property, state } from 'lit/decorators.js';\n\nimport { LitElementConstructor } from '../foundation.js';\nimport { targetLocales } from '../locales.js';\n\nexport type Plugin = {\n  name: string;\n  translations?: Record<typeof targetLocales[number], string>;\n  src: string;\n  icon: string;\n  requireDoc?: boolean;\n  active?: boolean;\n};\nexport type PluginSet = { menu: Plugin[]; editor: Plugin[] };\n\nconst pluginTags = new Map<string, string>();\n/**\n * Hashes `uri` using cyrb64 analogous to\n * https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js .\n * @returns a valid customElement tagName containing the URI hash.\n */\nexport function pluginTag(uri: string): string {\n  if (!pluginTags.has(uri)) {\n    /* eslint-disable no-bitwise */\n    let h1 = 0xdeadbeef;\n    let h2 = 0x41c6ce57;\n    /* eslint-disable-next-line no-plusplus */\n    for (let i = 0, ch; i < uri.length; i++) {\n      ch = uri.charCodeAt(i);\n      h1 = Math.imul(h1 ^ ch, 2654435761);\n      h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n    h1 =\n      Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^\n      Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n    h2 =\n      Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^\n      Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n    pluginTags.set(\n      uri,\n      `oscd-p${\n        (h2 >>> 0).toString(16).padStart(8, '0') +\n        (h1 >>> 0).toString(16).padStart(8, '0')\n      }`\n    );\n    /* eslint-enable no-bitwise */\n  }\n  return pluginTags.get(uri)!;\n}\n\nexport function Plugging<TBase extends LitElementConstructor>(Base: TBase) {\n  class PluggingElement extends Base {\n    #loadedPlugins = new Map<string, Plugin>();\n\n    @state()\n    get loadedPlugins(): Map<string, Plugin> {\n      return this.#loadedPlugins;\n    }\n\n    #plugins: PluginSet = { menu: [], editor: [] };\n\n    @property({ type: Object })\n    get plugins(): PluginSet {\n      return this.#plugins;\n    }\n\n    set plugins(plugins: Partial<PluginSet>) {\n      Object.values(plugins).forEach(kind =>\n        kind.forEach(plugin => {\n          const tagName = pluginTag(plugin.src);\n          if (this.loadedPlugins.has(tagName)) return;\n          this.#loadedPlugins.set(tagName, plugin);\n          if (customElements.get(tagName)) return;\n          import(plugin.src).then(mod =>\n            customElements.define(tagName, mod.default)\n          );\n        })\n      );\n\n      this.#plugins = { menu: [], editor: [], ...plugins };\n      this.requestUpdate();\n    }\n  }\n  return PluggingElement;\n}\n"]}